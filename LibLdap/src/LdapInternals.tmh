//62a0ae71e155da5b520ed099638f0fcc Generated File. Do not edit.
// File created by WPP compiler version 0.01-Tue Jun 18 06:04:29 2013
// from template C:\Program Files (x86)\Windows Kits\8.1\bin\WppConfig\Rev1\um-default.tpl

// template C:\Program Files (x86)\Windows Kits\8.1\bin\WppConfig\Rev1\um-header.tpl
#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE LdapInternals_c

#ifndef WPP_ALREADY_INCLUDED

#ifndef USER_MODE_NATIVE_ETW
#ifdef BUILD_MINWIN
#include <windowscore.h>
#else
#include <windows.h>
#endif
#endif

#include <wmistr.h>
#include <evntrace.h>
#ifndef WPP_TRACE_W2K_COMPATABILITY
#include <sddl.h>
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#ifdef USER_MODE_NATIVE_ETW
#define WPP_USE_NTDLL_FUNCTIONS

typedef 
ULONG 
(__stdcall *WMIDPREQUEST)(
    _In_ WMIDPREQUESTCODE RequestCode,
    _In_ PVOID RequestContext,
    _Inout_ ULONG *BufferSize,
    _Inout_ PVOID Buffer
    );

typedef struct  _TRACE_GUID_REGISTRATION {
    LPCGUID Guid;            // Guid of data block being registered or updated.
    HANDLE RegHandle;        // Guid Registration Handle is returned.
} TRACE_GUID_REGISTRATION, *PTRACE_GUID_REGISTRATION;

#endif

// LEGACY: This structure was used by Win2k RpcRt4 and cluster tracing

typedef struct _WPP_WIN2K_CONTROL_BLOCK {
    TRACEHANDLE Logger;
    ULONG Flags;
    ULONG Level;
    LPCGUID ControlGuid;
} WPP_WIN2K_CONTROL_BLOCK, *PWPP_WIN2K_CONTROL_BLOCK;

#pragma warning(push)
#pragma warning(disable:4201) // nonstandard extension used nameless struct/union

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    struct _WPP_TRACE_CONTROL_BLOCK *Next;
    TRACEHANDLE     UmRegistrationHandle;
    union {
        TRACEHANDLE              Logger;
        PWPP_WIN2K_CONTROL_BLOCK Win2kCb;
        PVOID                    Ptr;
        struct _WPP_TRACE_CONTROL_BLOCK *Cb;
    };
    
    UCHAR           FlagsLen; 
    UCHAR           Level; 
    USHORT          Options;
    ULONG           Flags[1];
    LPCGUID         ControlGuid;
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;
#pragma warning(pop)

#ifdef WPP_USE_NTDLL_FUNCTIONS

ULONG
__stdcall
EtwTraceMessage(
    _In_ TRACEHANDLE LoggerHandle,
    _In_ ULONG MessageFlags,
    _In_ LPCGUID MessageGuid,
    _In_ USHORT MessageNumber,
    ...
    );

TRACEHANDLE
__stdcall
EtwGetTraceLoggerHandle(
    _In_ PVOID Buffer
    );

UCHAR
__stdcall
EtwGetTraceEnableLevel(
    _In_ TRACEHANDLE LoggerHandle
    );

ULONG
__stdcall
EtwGetTraceEnableFlags(
    _In_ TRACEHANDLE LoggerHandle
    );

ULONG 
__stdcall
EtwRegisterTraceGuidsW(
    _In_ WMIDPREQUEST RequestAddress,
    _In_ PVOID RequestContext,
    _In_ LPCGUID ControlGuid,
    _In_ ULONG GuidCount,
    _In_ PTRACE_GUID_REGISTRATION GuidReg,
    _In_opt_ LPCWSTR MofImagePath,
    _In_opt_ LPCWSTR MofResourceName,
    _Out_ PTRACEHANDLE RegistrationHandle
    );

ULONG
__stdcall
EtwUnregisterTraceGuids(
    _In_ TRACEHANDLE RegistrationHandle
    );

#define WPP_TRACE                   EtwTraceMessage
#define WPP_GET_TRACE_LOGGER_HANDLE EtwGetTraceLoggerHandle
#define WPP_GET_TRACE_ENABLE_LEVEL  EtwGetTraceEnableLevel
#define WPP_GET_TRACE_ENABLE_FLAGS  EtwGetTraceEnableFlags
#define WPP_REGISTER_TRACE_GUIDS    EtwRegisterTraceGuidsW
#define WPP_UNREGISTER_TRACE_GUIDS  EtwUnregisterTraceGuids

#endif

#define WPP_IsValidSid IsValidSid
#define WPP_GetLengthSid GetLengthSid

#ifndef WPP_TRACE
#define WPP_TRACE TraceMessage
#endif

#ifndef WPP_UNREGISTER_TRACE_GUIDS
#define WPP_UNREGISTER_TRACE_GUIDS  UnregisterTraceGuids 
#endif


#ifndef WPP_REGISTER_TRACE_GUIDS 
#define WPP_REGISTER_TRACE_GUIDS  RegisterTraceGuids
#endif


#ifndef WPP_GET_TRACE_LOGGER_HANDLE
#define WPP_GET_TRACE_LOGGER_HANDLE  GetTraceLoggerHandle
#endif

#ifndef WPP_GET_TRACE_ENABLE_LEVEL 
#define WPP_GET_TRACE_ENABLE_LEVEL  GetTraceEnableLevel
#endif

#ifndef WPP_GET_TRACE_ENABLE_FLAGS 
#define WPP_GET_TRACE_ENABLE_FLAGS  GetTraceEnableFlags
#endif

enum {
    WPP_VER_WIN2K_CB_FORWARD_PTR    = 0x01,
    WPP_VER_WHISTLER_CB_FORWARD_PTR = 0x02,
    WPP_VER_LH_CB_FORWARD_PTR = 0x03
};

VOID WppCleanupUm( VOID );
#define WPP_CLEANUP() WppCleanupUm()

#define WppLoadTracingSupport 

//
// For getting private callback, implement a function with the signature below.
// To register the function: #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_PRIVATE_ENABLE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ TRACEHANDLE Logger, 
    _In_ BOOLEAN Enable, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level
    );  

#endif

//
// For generating CAPTURE_STATE callback (Win7+), implement a function with the signature
// below. To register the function: #define WPP_CAPTURE_STATE_CALLBACK MyCaptureStateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_CAPTURE_STATE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_CAPTURE_STATE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ TRACEHANDLE Logger, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level
    );

#endif

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

// template C:\Program Files (x86)\Windows Kits\8.1\bin\WppConfig\Rev1\control.tpl
//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_CONTROL_GUIDS)  && defined(WPP_ETW_PROVIDER)
#define WPP_NO_CONTROL_GUIDS
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) }; 
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif


#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

// template C:\Program Files (x86)\Windows Kits\8.1\bin\WppConfig\Rev1\tracemacro.tpl
//   expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c104
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c110
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c126
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c130
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c143
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c147
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c160
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c178
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c191
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c218
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c222
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c244
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c251
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c257
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c281
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c288
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c310
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c321
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c327
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c34
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c347
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c375
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c39
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c392
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c398
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c407
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c416
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c460
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c476
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c501
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c517
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c522
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c560
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c57
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c576
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c580
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c63
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c82
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_LdapInternals_c87
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else
#define WPP_FUNC_NAME
#endif

#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c104_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0Failed to free <%10!p!> with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c104_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0Failed to free <%10!p!> with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c104
    #define WPP_ANNOTATE_LdapInternals_c104 WPP_ANNOTATE_LdapInternals_c104_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c104 WPP_ANNOTATE_LdapInternals_c104_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c104", L"{", L"pvMemory, ItemPtr -- 10" , L"hHeap, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c110_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0Freed <%10!p!> with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c110_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0Freed <%10!p!> with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c110
    #define WPP_ANNOTATE_LdapInternals_c110 WPP_ANNOTATE_LdapInternals_c110_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c110 WPP_ANNOTATE_LdapInternals_c110_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c110", L"{", L"pvMemory, ItemPtr -- 10" , L"hHeap, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c126_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0Failed to set LDAP option <%10!#x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=CONFIGURATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c126_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0Failed to set LDAP option <%10!#x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=CONFIGURATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c126
    #define WPP_ANNOTATE_LdapInternals_c126 WPP_ANNOTATE_LdapInternals_c126_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c126 WPP_ANNOTATE_LdapInternals_c126_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c126", L"{", L"(unsigned int)pOption->iOption, ItemLong -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c130_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0Successfully set LDAP option <%10!#x!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=CONFIGURATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c130_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0Successfully set LDAP option <%10!#x!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=CONFIGURATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c130
    #define WPP_ANNOTATE_LdapInternals_c130 WPP_ANNOTATE_LdapInternals_c130_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c130 WPP_ANNOTATE_LdapInternals_c130_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c130", L"{", L"(unsigned int)pOption->iOption, ItemLong -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c143_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0Starting attribute <%10!s!> extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c143_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0Starting attribute <%10!s!> extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c143
    #define WPP_ANNOTATE_LdapInternals_c143 WPP_ANNOTATE_LdapInternals_c143_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c143 WPP_ANNOTATE_LdapInternals_c143_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c143", L"{", L"ptAttributeName, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c147_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0Invalid input parameters for LdapExtractAttributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c147_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0Invalid input parameters for LdapExtractAttributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c147
    #define WPP_ANNOTATE_LdapInternals_c147 WPP_ANNOTATE_LdapInternals_c147_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c147 WPP_ANNOTATE_LdapInternals_c147_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c147", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c160_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0Extracted empty value for attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c160_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0Extracted empty value for attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c160
    #define WPP_ANNOTATE_LdapInternals_c160 WPP_ANNOTATE_LdapInternals_c160_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c160 WPP_ANNOTATE_LdapInternals_c160_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c160", L"{", L"(*ppNewAttribute)->ptName, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c178_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0Unable to copy attribute value: <gle:%10!#08x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c178_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0Unable to copy attribute value: <gle:%10!#08x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c178
    #define WPP_ANNOTATE_LdapInternals_c178 WPP_ANNOTATE_LdapInternals_c178_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c178 WPP_ANNOTATE_LdapInternals_c178_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c178", L"{", L"dwResult, ItemLong -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c191_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0Extracted <%10!u!> values for attribute <%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c191_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0Extracted <%10!u!> values for attribute <%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c191
    #define WPP_ANNOTATE_LdapInternals_c191 WPP_ANNOTATE_LdapInternals_c191_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"Arg, ItemWString -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c191 WPP_ANNOTATE_LdapInternals_c191_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c191", L"{", L"(*ppNewAttribute)->dwValuesCount, ItemLong -- 10" , L"(*ppNewAttribute)->ptName, ItemWString -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c218_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0Starting range attribute extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c218_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0Starting range attribute extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c218
    #define WPP_ANNOTATE_LdapInternals_c218 WPP_ANNOTATE_LdapInternals_c218_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c218 WPP_ANNOTATE_LdapInternals_c218_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c218", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c222_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0Invalid input parameters for LdapExtractRangedAttributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c222_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0Invalid input parameters for LdapExtractRangedAttributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c222
    #define WPP_ANNOTATE_LdapInternals_c222 WPP_ANNOTATE_LdapInternals_c222_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c222 WPP_ANNOTATE_LdapInternals_c222_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c222", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c244_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0Unable to process inner LDAP request for multivaluate attribute <%10!s!>: <%11!#x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c244_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0Unable to process inner LDAP request for multivaluate attribute <%10!s!>: <%11!#x!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c244
    #define WPP_ANNOTATE_LdapInternals_c244 WPP_ANNOTATE_LdapInternals_c244_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c244 WPP_ANNOTATE_LdapInternals_c244_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c244", L"{", L"ptCurrentDN, ItemWString -- 10" , L"dwRet, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c251_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0Unable to process inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c251_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0Unable to process inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c251
    #define WPP_ANNOTATE_LdapInternals_c251 WPP_ANNOTATE_LdapInternals_c251_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c251 WPP_ANNOTATE_LdapInternals_c251_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c251", L"{", L"ptCurrentDN, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c257_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0Unable to extract range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c257_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0Unable to extract range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c257
    #define WPP_ANNOTATE_LdapInternals_c257 WPP_ANNOTATE_LdapInternals_c257_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c257 WPP_ANNOTATE_LdapInternals_c257_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c257", L"{", L"ptCurrentDN, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c281_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0Unable to build new attribute range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c281_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0Unable to build new attribute range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c281
    #define WPP_ANNOTATE_LdapInternals_c281 WPP_ANNOTATE_LdapInternals_c281_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c281 WPP_ANNOTATE_LdapInternals_c281_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c281", L"{", L"ptCurrentDN, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c288_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0Extracted <%10!u!> values for ranged attribute <%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c288_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0Extracted <%10!u!> values for ranged attribute <%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c288
    #define WPP_ANNOTATE_LdapInternals_c288 WPP_ANNOTATE_LdapInternals_c288_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"Arg, ItemWString -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c288 WPP_ANNOTATE_LdapInternals_c288_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c288", L"{", L"(*ppNewAttribute)->dwValuesCount, ItemLong -- 10" , L"(*ppNewAttribute)->ptName, ItemWString -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c310_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0Starting range attribute values extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c310_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0Starting range attribute values extraction\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c310
    #define WPP_ANNOTATE_LdapInternals_c310 WPP_ANNOTATE_LdapInternals_c310_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c310 WPP_ANNOTATE_LdapInternals_c310_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c310", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c321_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0Unable to extract range values: there is no attributes for the current entry: <%10!p!>\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c321_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0Unable to extract range values: there is no attributes for the current entry: <%10!p!>\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c321
    #define WPP_ANNOTATE_LdapInternals_c321 WPP_ANNOTATE_LdapInternals_c321_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c321 WPP_ANNOTATE_LdapInternals_c321_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c321", L"{", L"pEntry, ItemPtr -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c327_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0Unable to parse attribute range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c327_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0Unable to parse attribute range values during inner LDAP request for multivaluate attribute <%10!s!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c327
    #define WPP_ANNOTATE_LdapInternals_c327 WPP_ANNOTATE_LdapInternals_c327_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c327 WPP_ANNOTATE_LdapInternals_c327_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c327", L"{", L"ptAttribute, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c34_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0Failed to allocate <%10!#x!> bytes of memory with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c34_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0Failed to allocate <%10!#x!> bytes of memory with heap <%11!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c34
    #define WPP_ANNOTATE_LdapInternals_c34 WPP_ANNOTATE_LdapInternals_c34_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c34 WPP_ANNOTATE_LdapInternals_c34_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c34", L"{", L"(unsigned int)dwBytes, ItemLong -- 10" , L"hHeap, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c347_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0Unable to copy requested ranged attributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c347_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0Unable to copy requested ranged attributes\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c347
    #define WPP_ANNOTATE_LdapInternals_c347 WPP_ANNOTATE_LdapInternals_c347_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c347 WPP_ANNOTATE_LdapInternals_c347_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c347", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c375_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0Extracted <%10!u!> values for ranged attribute\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c375_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0Extracted <%10!u!> values for ranged attribute\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c375
    #define WPP_ANNOTATE_LdapInternals_c375 WPP_ANNOTATE_LdapInternals_c375_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c375 WPP_ANNOTATE_LdapInternals_c375_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c375", L"{", L"dwAttributeCount, ItemLong -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c39_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0Allocated <%10!#x!> bytes of memory with heap <%11!p!>: <%12!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c39_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0Allocated <%10!#x!> bytes of memory with heap <%11!p!>: <%12!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c39
    #define WPP_ANNOTATE_LdapInternals_c39 WPP_ANNOTATE_LdapInternals_c39_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemLong -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c39 WPP_ANNOTATE_LdapInternals_c39_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c39", L"{", L"(unsigned int)dwBytes, ItemLong -- 10" , L"hHeap, ItemPtr -- 11" , L"pvMemory, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c392_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0Starting range parsing <type:%10!s!> <desc:%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c392_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0Starting range parsing <type:%10!s!> <desc:%11!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c392
    #define WPP_ANNOTATE_LdapInternals_c392 WPP_ANNOTATE_LdapInternals_c392_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"Arg, ItemWString -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c392 WPP_ANNOTATE_LdapInternals_c392_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c392", L"{", L"ptAtttype, ItemWString -- 10" , L"ptAttdescr, ItemWString -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c398_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 38 \"%0Invalid input parameters for ParseRange\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c398_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 38 \"%0Invalid input parameters for ParseRange\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c398
    #define WPP_ANNOTATE_LdapInternals_c398 WPP_ANNOTATE_LdapInternals_c398_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c398 WPP_ANNOTATE_LdapInternals_c398_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c398", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c407_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 39 \"%0Unable to parse range values: there is no range for the current attribute: <%10!s!>\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c407_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 39 \"%0Unable to parse range values: there is no range for the current attribute: <%10!s!>\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c407
    #define WPP_ANNOTATE_LdapInternals_c407 WPP_ANNOTATE_LdapInternals_c407_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c407 WPP_ANNOTATE_LdapInternals_c407_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c407", L"{", L"ptAttdescr, ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c416_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 40 \"%0Unable to parse range values: invalid range separator\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c416_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 40 \"%0Unable to parse range values: invalid range separator\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c416
    #define WPP_ANNOTATE_LdapInternals_c416 WPP_ANNOTATE_LdapInternals_c416_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c416 WPP_ANNOTATE_LdapInternals_c416_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c416", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c460_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 41 \"%0Extracted new range for attribute <%10!s!>: <start:%11!u!> <end:%12!u!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c460_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 41 \"%0Extracted new range for attribute <%10!s!>: <start:%11!u!> <end:%12!u!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c460
    #define WPP_ANNOTATE_LdapInternals_c460 WPP_ANNOTATE_LdapInternals_c460_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c460 WPP_ANNOTATE_LdapInternals_c460_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c460", L"{", L"ptAtttype, ItemWString -- 10" , L"*pdwStart, ItemLong -- 11" , L"*pdwEnd, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c476_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 42 \"%0Starting build of an attribute range <type:%10!s!> <start:%11!u!> <end:%12!d!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c476_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 42 \"%0Starting build of an attribute range <type:%10!s!> <start:%11!u!> <end:%12!d!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c476
    #define WPP_ANNOTATE_LdapInternals_c476 WPP_ANNOTATE_LdapInternals_c476_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c476 WPP_ANNOTATE_LdapInternals_c476_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c476", L"{", L"ptAttrType, ItemWString -- 10" , L"dwStart, ItemLong -- 11" , L"iEnd, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c501_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 43 \"%0Build new attribute range successfully: <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c501_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 43 \"%0Build new attribute range successfully: <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c501
    #define WPP_ANNOTATE_LdapInternals_c501 WPP_ANNOTATE_LdapInternals_c501_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c501 WPP_ANNOTATE_LdapInternals_c501_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c501", L"{", L"(*tOutputRangeAttr), ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c517_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 44 \"%0Attribute <%10!s!> is a ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c517_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 44 \"%0Attribute <%10!s!> is a ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c517
    #define WPP_ANNOTATE_LdapInternals_c517 WPP_ANNOTATE_LdapInternals_c517_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c517 WPP_ANNOTATE_LdapInternals_c517_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c517", L"{", L"ptAttribute, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c522_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 45 \"%0Attribute <%10!s!> is not a ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c522_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 45 \"%0Attribute <%10!s!> is not a ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=REQUEST" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c522
    #define WPP_ANNOTATE_LdapInternals_c522 WPP_ANNOTATE_LdapInternals_c522_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c522 WPP_ANNOTATE_LdapInternals_c522_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c522", L"{", L"ptAttribute, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c560_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 46 \"%0Starting original attribute extraction from ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c560_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 46 \"%0Starting original attribute extraction from ranged one\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=INITIALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c560
    #define WPP_ANNOTATE_LdapInternals_c560 WPP_ANNOTATE_LdapInternals_c560_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c560 WPP_ANNOTATE_LdapInternals_c560_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c560", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c57_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0Failed to re-allocate <%10!p!> with <%11!#x!> bytes of memory with heap <%12!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c57_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0Failed to re-allocate <%10!p!> with <%11!#x!> bytes of memory with heap <%12!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c57
    #define WPP_ANNOTATE_LdapInternals_c57 WPP_ANNOTATE_LdapInternals_c57_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c57 WPP_ANNOTATE_LdapInternals_c57_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c57", L"{", L"pvMemory, ItemPtr -- 10" , L"(unsigned int)dwBytes, ItemLong -- 11" , L"hHeap, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c576_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 47 \"%0Unable to copy original attribute name into result buffer\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c576_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 47 \"%0Unable to copy original attribute name into result buffer\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=MEMORY_MANAGEMENT" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c576
    #define WPP_ANNOTATE_LdapInternals_c576 WPP_ANNOTATE_LdapInternals_c576_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c576 WPP_ANNOTATE_LdapInternals_c576_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c576", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c580_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 48 \"%0Extracted original attribute from ranged one: <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FINALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c580_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 48 \"%0Extracted original attribute from ranged one: <%10!s!>\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FINALIZATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c580
    #define WPP_ANNOTATE_LdapInternals_c580 WPP_ANNOTATE_LdapInternals_c580_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemWString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c580 WPP_ANNOTATE_LdapInternals_c580_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c580", L"{", L"(*pptOrigAttribute), ItemWString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c63_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0Re-allocated <%10!p!> with <%11!#x!> bytes of memory with heap <%12!p!>: <%13!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c63_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0Re-allocated <%10!p!> with <%11!#x!> bytes of memory with heap <%12!p!>: <%13!p!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c63
    #define WPP_ANNOTATE_LdapInternals_c63 WPP_ANNOTATE_LdapInternals_c63_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"Arg, ItemPtr -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c63 WPP_ANNOTATE_LdapInternals_c63_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c63", L"{", L"pvMemory, ItemPtr -- 10" , L"(unsigned int)dwBytes, ItemLong -- 11" , L"hHeap, ItemPtr -- 12" , L"pvMemoryLoc, ItemPtr -- 13" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c82_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0Failed to dup <%10!p!:%11!s!> with heap <%12!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c82_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0Failed to dup <%10!p!:%11!s!> with heap <%12!p!>\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c82
    #define WPP_ANNOTATE_LdapInternals_c82 WPP_ANNOTATE_LdapInternals_c82_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c82 WPP_ANNOTATE_LdapInternals_c82_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c82", L"{", L"ptStr, ItemPtr -- 10" , L"ptStr, ItemString -- 11" , L"hHeap, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_LdapInternals_c87_FINAL(P, File, Name, ...)    __annotation(L ## P, L"71aea062-55e1-5bda-520e-d099638f0fcc src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0Dupped <%10!p!> to <%11!p!> with heap <%12!p!>: <%13!s!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_LdapInternals_c87_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"src // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0Dupped <%10!p!> to <%11!p!> with heap <%12!p!>: <%13!s!>\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ALLOCATION" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_LdapInternals_c87
    #define WPP_ANNOTATE_LdapInternals_c87 WPP_ANNOTATE_LdapInternals_c87_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemPtr -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemPtr -- 12" , L"Arg, ItemString -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_LdapInternals_c87 WPP_ANNOTATE_LdapInternals_c87_FINAL("TMF:", "LdapInternals.c", "LdapInternals_c87", L"{", L"ptStr, ItemPtr -- 10" , L"ptDupStr, ItemPtr -- 11" , L"hHeap, ItemPtr -- 12" , L"ptDupStr, ItemString -- 13" , L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif


#if 1
#if !defined(WPP_USER_MSG_GUID)

#define WPP_LOCAL_TraceGuids WPP_71aea06255e15bda520ed099638f0fcc_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x71aea062,0x55e1,0x5bda,{0x52,0x0e,0xd0,0x99,0x63,0x8f,0x0f,0xcc}}, };

#else

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#endif
#endif


#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif

#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (_value)?(((_value)[0] == 0)?7 * sizeof(WCHAR):(wcslen(_value) + 1)* sizeof(WCHAR)):5 * sizeof(WCHAR), (_value)?(((_value)[0] == 0) ? L"<NULL>" : (_value)):L"NULL")
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(WCHAR), (_x && (*(_x)).Buffer)?(*(_x)).Buffer:L"NULL")
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(char), (_x && (*(_x)).Buffer)?((const char *)(*(_x)).Buffer):"NULL")
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_CHECK_INIT)
# define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && 
#endif


#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def
#ifndef WPP_SF_D_def
#       define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1)  0); }
#endif  // #ifndef WPP_SF_D_def
#ifndef WPP_SF_DS_def
#       define WPP_SF_DS_def
WPP_INLINE void WPP_SF_DS(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, LPCWSTR _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGWSTR(_a2)  0); }
#endif  // #ifndef WPP_SF_DS_def
#ifndef WPP_SF_Dq_def
#       define WPP_SF_Dq_def
WPP_INLINE void WPP_SF_Dq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_Dq_def
#ifndef WPP_SF_Dqq_def
#       define WPP_SF_Dqq_def
WPP_INLINE void WPP_SF_Dqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, const void* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_Dqq_def
#ifndef WPP_SF_S_def
#       define WPP_SF_S_def
WPP_INLINE void WPP_SF_S(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1)  0); }
#endif  // #ifndef WPP_SF_S_def
#ifndef WPP_SF_SD_def
#       define WPP_SF_SD_def
WPP_INLINE void WPP_SF_SD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1, unsigned int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0); }
#endif  // #ifndef WPP_SF_SD_def
#ifndef WPP_SF_SDD_def
#       define WPP_SF_SDD_def
WPP_INLINE void WPP_SF_SDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1, unsigned int _a2, unsigned int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(unsigned int,_a3)  0); }
#endif  // #ifndef WPP_SF_SDD_def
#ifndef WPP_SF_SDd_def
#       define WPP_SF_SDd_def
WPP_INLINE void WPP_SF_SDd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1, unsigned int _a2, signed int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed int,_a3)  0); }
#endif  // #ifndef WPP_SF_SDd_def
#ifndef WPP_SF_SS_def
#       define WPP_SF_SS_def
WPP_INLINE void WPP_SF_SS(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1, LPCWSTR _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  0); }
#endif  // #ifndef WPP_SF_SS_def
#ifndef WPP_SF_q_def
#       define WPP_SF_q_def
WPP_INLINE void WPP_SF_q(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1)  0); }
#endif  // #ifndef WPP_SF_q_def
#ifndef WPP_SF_qDq_def
#       define WPP_SF_qDq_def
WPP_INLINE void WPP_SF_qDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned int _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_qDq_def
#ifndef WPP_SF_qDqq_def
#       define WPP_SF_qDqq_def
WPP_INLINE void WPP_SF_qDqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned int _a2, const void* _a3, const void* _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3) WPP_LOGTYPEVAL(const void*,_a4)  0); }
#endif  // #ifndef WPP_SF_qDqq_def
#ifndef WPP_SF_qq_def
#       define WPP_SF_qq_def
WPP_INLINE void WPP_SF_qq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_qq_def
#ifndef WPP_SF_qqqs_def
#       define WPP_SF_qqqs_def
WPP_INLINE void WPP_SF_qqqs(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2, const void* _a3, const char* _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3) WPP_LOGASTR(_a4)  0); }
#endif  // #ifndef WPP_SF_qqqs_def
#ifndef WPP_SF_qsq_def
#       define WPP_SF_qsq_def
WPP_INLINE void WPP_SF_qsq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const char* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_qsq_def
#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif

#ifndef WPP_LOG_ALWAYS
#  define WPP_LOG_ALWAYS(...)
#endif      

#ifdef WPP_DEBUG
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c104(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c104) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c110(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c110) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c126(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c126) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c130(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c130) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c143(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c143) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c147(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c147) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c160(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c160) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c178(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c178) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c191(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c191) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_DS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c218(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c218) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c222(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c222) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c244(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c244) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_SD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c251(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c251) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c257(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c257) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c281(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c281) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c288(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c288) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_DS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c310(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c310) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c321(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c321) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c327(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c327) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c34(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c34) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c347(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c347) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c375(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c375) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c39(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c39) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_Dqq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c392(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c392) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_SS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                             WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c398(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c398) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c407(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c407) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 39, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c416(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c416) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 40, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c460(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c460) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_SDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 41, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c476(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c476) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_SDd(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 42, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c501(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c501) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 43, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c517(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c517) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 44, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c522(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c522) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 45, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c560(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c560) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 46, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c57(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c57) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_qDq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c576(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c576) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 47, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c580(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c580) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 48, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c63(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12,a13)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c63) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12,a13)), \
          WPP_SF_qDqq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12, a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c82(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c82) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_qsq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c87(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12,a13)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c87) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12,a13)), \
          WPP_SF_qqqs(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                             WPP_LOCAL_TraceGuids+0, a10, a11, a12, a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c104(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c104) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c110(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c110) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c126(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c126) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c130(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c130) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c143(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c143) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c147(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c147) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c160(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c160) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c178(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c178) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c191(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c191) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c218(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c218) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c222(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c222) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c244(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c244) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_SD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c251(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c251) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c257(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c257) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c281(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c281) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c288(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c288) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c310(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c310) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c321(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c321) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c327(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c327) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c34(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c34) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c347(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c347) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c375(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c375) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c39(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c39) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dqq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c392(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c392) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_SS(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                               WPP_LOCAL_TraceGuids+0, a10, a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c398(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c398) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c407(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c407) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 39, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c416(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c416) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 40, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c460(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c460) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_SDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 41, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c476(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c476) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_SDd(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 42, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c501(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c501) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 43, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c517(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c517) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 44, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c522(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c522) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 45, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c560(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c560) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 46, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c57(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c57) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qDq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c576(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c576) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 47, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c580(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c580) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_S(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 48, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c63(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12,a13) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c63) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qDqq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12, a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c82(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c82) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qsq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_LdapInternals_c87(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10,a11,a12,a13) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(LdapInternals_c87) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qqqs(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                               WPP_LOCAL_TraceGuids+0, a10, a11, a12, a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif


#ifdef WPP_DEBUG
#else
#endif



#if defined(__cplusplus)
};
#endif


#pragma once

#ifdef WPP_ETW_PROVIDER

#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"


#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif


#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE     RegistrationHandle;
    TRACEHANDLE     Logger;
    ULONGLONG       MatchAnyKeyword;
    ULONGLONG       MatchAllKeyword;
    ULONG           Flags;
    ULONG           IsEnabled;
    UCHAR           Level; 
    UCHAR           Reserve;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    __in PMCGEN_TRACE_CONTEXT EnableInfo,
    __in PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((EventDescriptor->Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((EventDescriptor->Keyword == (ULONGLONG)0) ||
            ((EventDescriptor->Keyword & EnableInfo->MatchAnyKeyword) &&
             ((EventDescriptor->Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {

            return TRUE;
        }
    }
    return FALSE;
}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    __in LPCGUID SourceId,
    __in ULONG ControlCode,
    __in UCHAR Level,
    __in ULONGLONG MatchAnyKeyword,
    __in ULONGLONG MatchAllKeyword,
    __in_opt PEVENT_FILTER_DESCRIPTOR FilterData,
    __inout_opt PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


EXTERN_C __declspec(selectany) const GUID ;// = {0x00000000, 0x0000, 0x0000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};

#define _CHANNEL_C1 0x9

#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION


EXTERN_C __declspec(selectany) REGHANDLE Handle;// = (REGHANDLE)0;

EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT _Context;// = {0};

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    __in LPCGUID ProviderId,
    __in_opt PENABLECALLBACK EnableCallback,
    __in_opt PVOID CallbackContext,
    __inout PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(__inout PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif

#ifdef WPP_LOGPAIR_SEPARATOR
# undef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR
#endif

#ifdef WPP_LOGPAIR_SIZET
# undef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET ULONG
#endif

#ifndef EventRegister
#define EventRegister() McGenEventRegister(&, McGenControlCallbackV2, &_Context, &Handle) 
#endif

#ifndef EventUnregister
#define EventUnregister() McGenEventUnregister(&Handle) 
#endif

#define ETW_START EventRegister
#define ETW_STOP EventUnregister

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#ifndef ETW_LOGPAIR
#define ETW_LOGPAIR(_Size, _Addr) WPP_LOGPAIR(_Size, _Addr)
#endif

#define ETW_LOGTYPEVAL(_Type, _Value) ETW_LOGPAIR(sizeof(_Type), &(_Value))
#define ETW_LOGTYPEPTR(_Value) ETW_LOGPAIR(sizeof(*(_Value)), (_Value))

#endif

#define ETW_THIS_FILE LdapInternals_c

#define ETW_EVAL(_value_) _value_
#define Event(Id) ETW_EVAL(Event) ## ETW_EVAL(Id) ## ETW_EVAL(_) ## ETW_EVAL(ETW_THIS_FILE) ## ETW_EVAL(__LINE__)

#if defined(__cplusplus)
};
#endif

#define MSG_event_10                         0x0000000AL
#define MSG_providermessage                  0x90000001L

#endif


//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef LdapWppMessage
#define LdapWppMessage WPP_(CALL)
// MsgArgs

// NoMsgArgs and Etw
